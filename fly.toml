# fly.toml app configuration file generated for redux-anecdotes-ci-cd-green-river-391 on 2024-11-10T02:10:31+02:00
#
# See https://fly.io/docs/reference/configuration/ for information about how to use this file.
#

app = 'redux-anecdotes-ci-cd-green-river-391'
primary_region = 'arn'

[build]
dockerfile = "Dockerfile"

[env]
PORT = "3000"
NODE_ENV = "production"

[http_service]
internal_port = 3000
force_https = true
auto_stop_machines = true
auto_start_machines = true
min_machines_running = 0

[http_service.health_check]
grace_period = "10s"
interval = "5s"
method = "GET"
timeout = "5s"
path = "/health"
protocol = "http"

[deploy]
strategy = "canary"
release_command = """
  node -e '
    const http = require("http");
    const { spawn } = require("child_process");
    console.log("Starting application...");

    const app = spawn("node", ["server.cjs"], {
      stdio: "inherit",
      env: { ...process.env, PORT: "3000" }
    });

    const healthCheck = () => {
      console.log("Running health check...");
      http.get("http://localhost:3000/health", res => {
        console.log("Health check status:", res.statusCode);
        if (res.statusCode === 200) {
          console.log("Health check passed");
          app.kill();
          process.exit(0);
        } else {
          console.error("Health check request failed");
          process.exit(1);
        }
      }).on("error", err => {
        console.error("Health check request failed:", err);
        process.exit(1);
      });
    };

    setTimeout(healthCheck, 10000);

    app.on("error", (err) => {
      console.error("App failed to start:", err);
      process.exit(1);
    });
  '
"""

[deploy.phases]
canary_weight = 20
wait_timeout = "60s"
require_healthy = true
health_check_timeout = "30s"
rollback_on_failure = true
min_success_duration = "20s"

[[vm]]
memory = '1gb'
cpu_kind = 'shared'
cpus = 1
